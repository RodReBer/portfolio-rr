---
// contact.astro (o donde esté tu backend del formulario)
import { isValidEmail } from "../services/contactValidate";
import { Resend } from "resend";

const resend = new Resend(import.meta.env.RESEND_API_KEY);

const errors = { Name: "", Email: "", Subject: "", Message: "", general: "" };
let formData = { Name: "", Email: "", Subject: "", Message: "" };
let successMessage = "";

if (Astro.request.method === "POST") {
  // Clear all previous errors
  Object.keys(errors).forEach((key) => (errors[key] = ""));

  try {
    const data = await Astro.request.formData();

    // Protección honeypot
    const botField = data.get("bot-field");
    if (botField && botField.toString().trim() !== "") {
      console.warn("Bot detected. Submission blocked.");
      errors.general = "Something went wrong. Please try again.";
      throw new Error("Bot submission detected.");
    }

    formData = {
      Name: data.get("Name")?.toString().trim() ?? "",
      Email: data.get("Email")?.toString().trim() ?? "",
      Subject: data.get("Subject")?.toString().trim() ?? "",
      Message: data.get("Message")?.toString().trim() ?? "",
    };

    // Validaciones humanas
    if (formData.Name.length < 1) {
      errors.Name = "Please enter your name.";
    } else if (
      formData.Name.toLowerCase().includes("wic") ||
      formData.Name.toLowerCase().includes("myname") ||
      formData.Name.toLowerCase().includes("testuser") ||
      formData.Name.toLowerCase().includes("hello") ||
      formData.Name.toLowerCase().includes("alice") ||
      formData.Name.toLowerCase().includes("john")
    ) {
      errors.Name = "Invalid name.";
    }

    if (!isValidEmail(formData.Email)) {
      errors.Email = "Please provide a valid email address.";
    }

    if (formData.Subject.length < 1) {
      errors.Subject = "Please enter a subject.";
    }

    if (formData.Message.length < 1) {
      errors.Message = "Your message cannot be empty.";
    }

    const hasErrors = Object.values(errors).some((msg) => msg);

    if (!hasErrors) {
      // Send email using Resend
      try {
        await resend.emails.send({
          from: "onboarding@resend.dev",
          to: "rodrigorey2005@gmail.com",
          subject: `New Contact Form Submission: ${formData.Subject}`,
          html: `
            <h1>New Contact Form Submission</h1>
            <p><strong>Name:</strong> ${formData.Name}</p>
            <p><strong>Email:</strong> ${formData.Email}</p>
            <p><strong>Subject:</strong> ${formData.Subject}</p>
            <p><strong>Message:</strong><br/>${formData.Message}</p>
          `,
        });

        await resend.emails.send({
          from: "correo@rodrigorey.info",
          to: formData.Email,
          subject: "Thank you for your message",
          html: `
            <h1>Thank You, ${formData.Name}</h1>
            <p>We received your message and will get back to you shortly.</p>
          `,
        });

        console.log("Form submitted successfully:", formData);
        successMessage =
          "Your message has been sent successfully! Please check your email for a confirmation.";
        formData = { Name: "", Email: "", Subject: "", Message: "" };
      } catch (emailError) {
        console.error("Error sending email:", emailError);
        errors.general =
          "An error occurred while sending your message. Please try again later.";
      }
    }
  } catch (error) {
    console.error(error instanceof Error ? error.message : error);
    if (!errors.general)
      errors.general = "An unexpected error occurred. Please try again.";
  }
}
---

<!-- Formulario con honeypot (campo oculto para bots) -->
<form class="max-w-md mx-auto" name="form" method="POST">
  {successMessage && (
    <div class="mb-4 p-4 bg-green-100 text-green-700 rounded-md">
      {successMessage}
    </div>
  )}

  <!-- Honeypot invisible (campo que solo llenan los bots) -->
  <input type="text" name="bot-field" style="display: none;" tabindex="-1" autocomplete="off" />

  <!-- Campo Name -->
  <div class="relative z-0 w-full mb-5 group">
    <input
      type="text"
      name="Name"
      id="Name"
      value={formData.Name}
      class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white focus:outline-none focus:ring-0 focus:border-violet-600 peer"
      placeholder=" "
      required
    />
    <label for="Name" class="peer-focus:font-medium absolute text-sm text-gray-500 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
      Name
    </label>
    {errors.Name && <p class="text-red-500 text-xs mt-1">{errors.Name}</p>}
  </div>

  <!-- Campo Email -->
  <div class="relative z-0 w-full mb-5 group">
    <input
      type="email"
      name="Email"
      id="Email"
      value={formData.Email}
      class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white focus:outline-none focus:ring-0 focus:border-violet-600 peer"
      placeholder=" "
      required
    />
    <label for="Email" class="peer-focus:font-medium absolute text-sm text-gray-500 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
      Email
    </label>
    {errors.Email && <p class="text-red-500 text-xs mt-1">{errors.Email}</p>}
  </div>

  <!-- Campo Subject -->
  <div class="relative z-0 w-full mb-5 group">
    <input
      type="text"
      name="Subject"
      id="Subject"
      value={formData.Subject}
      class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white focus:outline-none focus:ring-0 focus:border-violet-600 peer"
      placeholder=" "
      required
    />
    <label for="Subject" class="peer-focus:font-medium absolute text-sm text-gray-500 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
      Subject
    </label>
    {errors.Subject && <p class="text-red-500 text-xs mt-1">{errors.Subject}</p>}
  </div>

  <!-- Campo Message -->
  <div class="relative z-0 w-full mb-5 group">
    <textarea
      name="Message"
      id="Message"
      value={formData.Message}
      class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white focus:outline-none focus:ring-0 focus:border-violet-600 peer"
      placeholder=" "
      required
    ></textarea>
    <label for="Message" class="peer-focus:font-medium absolute text-sm text-gray-500 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
      Message
    </label>
    {errors.Message && <p class="text-red-500 text-xs mt-1">{errors.Message}</p>}
  </div>

  {errors.general && <p class="text-red-500 text-sm mb-4">{errors.general}</p>}

  <button
    type="submit"
    class="bg-violet-600 text-white px-4 py-2 rounded hover:bg-violet-700 transition"
  >
    Send Message
  </button>
</form>
